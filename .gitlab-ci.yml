include:
  - project: "deposition.cloud/infra/devops/ci-cd-templates/node-pipeline"
    file: ".gitlab/template.yml"

build:
  extends: .build

unit:
  extends: .unit

latest:
  extends: .latest

tag:
  extends: .tag

semantic:
  extends: .semantic

stages:
  - sync
  - prepare
  - test
  - push
  - release

sync:
  stage: sync
  image: alpine:latest
  variables:
    GIT_STRATEGY: none
  before_script:
    - apk add --no-cache git bash
    - git config --global user.name  "Paul Cuciureanu"
    - git config --global user.email "paul@cuciureanu.com"
  only:
    - main
  script: |
    set -euo pipefail

    echo "üîÑ Cloning self from GitLab..."
    git clone "$CI_REPOSITORY_URL" repo
    cd repo

    echo "üîÅ Rewriting origin to use CI token"
    git remote set-url --push origin "https://$GITLAB_TOKEN_USER:$GITLAB_TOKEN@gitlab.com/${CI_PROJECT_PATH}.git"

    echo "üåç Adding GitHub remotes (fetch from upstream, push to fork)..."
    git remote remove github || true
    git remote add github "https://github.com/All-Hands-AI/OpenHands.git"
    git remote set-url --push github "https://$GITHUB_USER:$GITHUB_TOKEN@github.com/deposition-cloud/openhands.git"
    git config remote.github.tagOpt --no-tags
    git config remote.github.push "+refs/heads/github:refs/heads/main"
    git config remote.github.push "+refs/heads/pr/*:refs/heads/pr/*"
    git config remote.github.fetch "+refs/heads/main:refs/remotes/github/main"

    echo "üì° Fetching refs..."
    git fetch origin --tags
    git fetch github

    echo "üîÅ Looping over origin branches..."
    for BRANCH in $(git for-each-ref --format='%(refname:strip=3)' refs/remotes/origin); do
      [ "$BRANCH" = "HEAD" ] && continue
      echo "=== Syncing branch: $BRANCH ==="

      git checkout -B "$BRANCH" "origin/$BRANCH"

      if ! git show-ref --quiet refs/remotes/github/$BRANCH; then
        echo "üîï github/$BRANCH not found ‚Äî skipping"
        continue
      fi

      echo "üîÅ Rebasing $BRANCH onto github/$BRANCH..."
      BASE=$(git merge-base "$BRANCH" "github/$BRANCH")
      git rebase --onto "github/$BRANCH" "$BASE" "$BRANCH" || {
        echo "‚ùå Rebase conflict on $BRANCH. Aborting."
        exit 1
      }

      echo "üîç Handling semantic-release tag for $BRANCH..."
      LAST_TAG=$(git describe --tags --abbrev=0 origin/$BRANCH 2>/dev/null || true)
      TAG_MOVED=false

      if [ -n "$LAST_TAG" ]; then
        OLD_SHA=$(git rev-list -n 1 "$LAST_TAG")
        if ! git merge-base --is-ancestor "$OLD_SHA" HEAD; then
          echo "ü™Ñ Tag $LAST_TAG no longer reachable ‚Äî moving"
          BASE_SHA=$(git merge-base HEAD "github/$BRANCH")
          git tag -f "$LAST_TAG" "$BASE_SHA"
          TAG_MOVED=true
        else
          echo "‚úÖ Tag $LAST_TAG still reachable"
        fi
      fi

      echo "üöÄ Determining whether to push changes..."
      if git log origin/$BRANCH..HEAD --oneline | grep .; then
        echo "‚¨ÜÔ∏è Pushing updated $BRANCH to GitLab and GitHub..."
        git push origin "$BRANCH" --force-with-lease
        git push github "$BRANCH" --force-with-lease
      else
        echo "üü∞ No changes after rebase ‚Äî skipping push."
      fi

      if [ "$TAG_MOVED" = true ]; then
        echo "üîÅ Pushing moved tag $LAST_TAG to GitLab..."
        git push origin "$LAST_TAG" --force -o ci.skip
      fi
    done
